// Configuration file [HOCON format]

// IoT Hub settings can be retrieved from the Azure portal at https://portal.azure.com
iothub {

  // see: "IoT Hub" >> your hub >> "Messaging" >> "Partitions"
  partitions = ${?IOTHUB_PARTITIONS}

  // see: "IoT Hub" >> your hub >> "Messaging" >> "Event Hub-compatible name"
  name = ${?IOTHUB_NAME}

  // see: "IoT Hub" >> your hub > "Messaging" >> "Event Hub-compatible endpoint"
  //      e.g. from "sb://iothub-ns-toketi-i-18552-16281e72ba.servicebus.windows.net/"
  //           use  "iothub-ns-toketi-i-18552-16281e72ba"
  namespace = ${?IOTHUB_NAMESPACE}

  // see: "IoT Hub" >> your hub >> "Shared access policies"
  // e.g. you could use the predefined "iothubowner"
  keyName = ${?IOTHUB_ACCESS_KEY_NAME}

  // see: "IoT Hub" >> your hub >> "Shared access policies" >> key name >> "Primary key"
  key = ${?IOTHUB_ACCESS_KEY_VALUE}

  // see: "IoT Hub" >> your hub > "Messaging" >> Consumer groups
  // "$Default" is predefined and is the typical scenario
  consumerGroup = "$Default"

  // Value expressed as a duration, e.g. 3s, 3000ms, "3 seconds", etc.
  receiverTimeout = 3s

  // How many messages to retrieve on each pull, max is 999
  receiverBatchSize = 999
}

// IoT hub stream checkpointing options
iothub-checkpointing {
  // whether the checkpointing feature is enabled
  enabled = true

  // checkpoints frequency (best effort)
  frequency = 1000ms

  // messages to memory checkpoints (1:N) ratio
  //cluster.frequency = 1

  storage {

    // Value expressed as a duration, e.g. 3s, 3000ms, "3 seconds", etc.
    rwTimeout = 5s

    backendType = "AzureBlob"

    // If you use the same storage while processing multiple streams, you'll want
    // to use a distinct table/container/path in each job, to to keep state isolated
    namespace = "iothub-react-checkpoints"

    // com.microsoft.azure.iot.iothubreact.checkpointing.Backends.AzureBlob
    azureblob {
      // Time allowed for a checkpoint to be written, rounded to seconds (min 15, max 60)
      lease = 15s
      // Whether to use the Azure Storage Emulator
      useEmulator = false
      // Storage credentials
      protocol = "https"
      account = "delucatoiothubreactdev"
      key = "NfLn2hb6H5jo4wnqKXTjUoK5T1Uec1IxyR0xZ99S57HqlfinQHfvorlf8IiSy2i7Thu6kiC7LinZ9JP/HM3G6Q=="
    }

    // com.microsoft.azure.iot.iothubreact.checkpointing.Backends.Cassandra
    cassandra {
      // @todo
    }

    // com.microsoft.azure.iot.iothubreact.checkpointing.Backends.Kafka
    kafka {
      // @todo
    }

    // com.microsoft.azure.iot.iothubreact.checkpointing.Backends.ZooKeeper
    zookeeper {
      // @todo
    }

    // com.microsoft.azure.iot.iothubreact.checkpointing.Backends.Redis
    redis {
      // @todo
    }
  }
}
