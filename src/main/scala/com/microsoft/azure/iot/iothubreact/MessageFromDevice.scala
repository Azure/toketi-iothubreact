// Copyright (c) Microsoft. All rights reserved.

package com.microsoft.azure.iot.iothubreact

import java.time.Instant
import java.util

import com.microsoft.azure.eventhubs.{EventData, ReceiverRuntimeInformation}
import com.microsoft.azure.iot.iothubreact.helpers.ISO8601DateTime
import com.microsoft.azure.servicebus.amqp.AmqpConstants

import scala.collection.JavaConverters._
import scala.language.{implicitConversions, postfixOps}

/* MessageFromDevice factory */
private object MessageFromDevice {

  /** Create a user friendly representation of the IoT message from the raw
    * data coming from the storage
    *
    * @param rawData         Raw data retrieved from the IoT hub storage
    * @param partitionNumber Storage partition where the message was retrieved from
    * @param partitionInfo   Information about the partition, e.g. about the last message
    *
    * @return
    */
  def apply(
      rawData: EventData,
      partitionNumber: Option[Int],
      partitionInfo: Option[ReceiverRuntimeInformation]): MessageFromDevice = {
    new MessageFromDevice(Some(rawData), partitionNumber, partitionInfo)
  }
}

/** Expose the IoT device message body and timestamp
  *
  * @param partNumber Storage partition where the message was retrieved from
  * @param partInfo   Information about the partition, e.g. about the last message
  */
class MessageFromDevice(
    data: Option[EventData],
    partNumber: Option[Int],
    partInfo: Option[ReceiverRuntimeInformation]) {

  // TODO: test properties over all protocols
  // TODO: use new system properties when available in Azure IoT SDK (MessageSchema, CreationTimeUtc, ContentType)

  private[iothubreact] val deviceIdProperty = "iothub-connection-device-id"

  private[iothubreact] val messageIdProperty = AmqpConstants.AMQP_PROPERTY_MESSAGE_ID

  // TODO: use system property (AmqpConstants.AMQP_PROPERTY_CONTENT_TYPE ?)
  private[iothubreact] val contentTypeProperty = "$$contentType"

  // TODO: use system property
  private[iothubreact] val messageSchemaProperty = "$$MessageSchema"

  // TODO: use system property
  private[iothubreact] val creationTimeUtcProperty = "$$CreationTimeUtc"

  // Internal properties set by IoT stoage
  private[this] lazy val systemProps = data.get.getSystemProperties()

  // Meta properties set by the device
  lazy val properties: util.Map[String, String] = data.get.getProperties().asScala.map(x â‡’ (x._1, x._2.toString)).asJava

  // Whether this is a keep alive message generated by the stream and not by IoT hub
  val isKeepAlive: Boolean = (partNumber == None)

  // Message type, the class to use to map the payload
  lazy val messageSchema: String = properties.getOrDefault(messageSchemaProperty, "")

  // Content type, e.g. JSON/Protobuf/Bond etc.
  // contentType = data.get.getSystemProperties.get(contentTypeProperty)
  lazy val contentType: String = properties.getOrDefault(contentTypeProperty, "")

  // Time when the message was received by IoT hub service. *NOT* the device time.
  lazy val received: Instant = systemProps.getEnqueuedTime

  // When the message is created by the device, using the `device clock`, which *might* be out of sync
  // TODO: Expose property when `CreationTimeUtc` is available through the SDK
  //lazy val created: Instant = systemProps...
  lazy val created: Instant = ISO8601DateTime(properties.getOrDefault(creationTimeUtcProperty, "0001-01-01")).instant

  // IoT message offset, useful to store the current position in the stream
  lazy val offset: String = systemProps.getOffset

  // IoT message sequence number
  lazy val sequenceNumber: Long = systemProps.getSequenceNumber

  // ID of the device who sent the message
  lazy val deviceId: String = systemProps.get(deviceIdProperty).toString

  // Message ID
  lazy val messageId: String = systemProps.get(messageIdProperty).toString

  // IoT message content bytes
  lazy val content: Array[Byte] = data.get.getBytes

  // IoT message content as string, e.g. JSON/XML/etc.
  lazy val contentAsString: String = new String(content)

  // Information about the partition containing the current message
  lazy val runtimeInfo: SourceRuntimeInfo =
    if (partNumber.isEmpty) {
      new SourceRuntimeInfo(new SourcePartitionInfo(None, None, None, None))
    } else if (partInfo.isEmpty || partInfo.get == null) {
      new SourceRuntimeInfo(new SourcePartitionInfo(partNumber, None, None, None))
    } else {
      new SourceRuntimeInfo(new SourcePartitionInfo(
        partNumber,
        Some(partInfo.get.getLastSequenceNumber),
        Some(partInfo.get.getLastEnqueuedOffset),
        Some(partInfo.get.getLastEnqueuedTime)))
    }
}
